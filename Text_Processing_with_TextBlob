{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOYKNL0aNh7qLmvFVmWvQYW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"vsF17LUsob1_"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["\n","\n","#Basic Guides\n","\n","**1. POS Tagging**\n","\n","**2. Noun Phrases**\n","\n","**3. Sentiment Analysis**\n","\n","**4. Tokenization**\n","\n","**5. Word Inflection**\n","\n","**6. Lemmatization**\n","\n","**7. Word frequencies  **\n","\n","**8. Parsing**\n","\n","**9.  N-gram**\n","\n"],"metadata":{"id":"biFDM9Wwow4E"}},{"cell_type":"markdown","source":["#Installing TextBlob\n","\n","Installing with PIP\n","\n","pip install textblob"],"metadata":{"id":"sU_0bogEqYpD"}},{"cell_type":"code","source":["import nltk\n","nltk.download('brown')"],"metadata":{"id":"mAh4fpEkyHSs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1691376188775,"user_tz":-330,"elapsed":466,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"8cdc3666-2208-4000-ba9f-90837a97233d"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package brown to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/brown.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["import nltk\n","nltk.download('punkt')\n","nltk.download('averaged_perceptron_tagger')\n","nltk.download('wordnet')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g2GIYYoNyM61","executionInfo":{"status":"ok","timestamp":1691376190882,"user_tz":-330,"elapsed":1074,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"532fa909-eb74-4f4b-ce13-c304671e4fb8"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","[nltk_data] Downloading package averaged_perceptron_tagger to\n","[nltk_data]     /root/nltk_data...\n","[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# Basic Guides\n","# Let’s start by importing the library.\n","\n","from textblob import TextBlob"],"metadata":{"id":"mmk6OokXpoTe","executionInfo":{"status":"ok","timestamp":1691376197503,"user_tz":-330,"elapsed":441,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"Eh20eOLW1eSJ"}},{"cell_type":"markdown","source":["We begin by creating a simple TextBlob. The syntax is fairly straightforward. Feel free to use a custom sentence of your choice.\n","\n"],"metadata":{"id":"gaSJHS9aqtR9"}},{"cell_type":"code","source":["\n","# from textblob lib import TextBlob method\n","from textblob import TextBlob\n","\n","text = (\"X, Y and Y are good friends.\"+\n","    \"X and Y are  getting married next year. \" )\n","\n","# create a textblob object\n","blob_object = TextBlob(text)\n","\n","# Part-of-speech tags can be accessed\n","# through the tags property of blob object.'\n","\n"],"metadata":{"id":"3oj1XiYpqxBM","executionInfo":{"status":"ok","timestamp":1691376199159,"user_tz":-330,"elapsed":9,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["#Now that our TextBlob is ready, let’s perform some operations."],"metadata":{"id":"aQZ2aZ6hq4aL"}},{"cell_type":"markdown","source":["#POS Tagging using Textblob\n","\n","Part-of-speech Tagging\n","Part-of-speech tagging or grammatical tagging is a method to mark words present in a text on the basis of its definition and context.\n","\n","\n","In simple words, it tells whether a word is a noun, or an adjective, or a verb, etc. This is just a complete version of noun phrase extraction, where we want to find all the the parts of speech in a sentence.\n","\n"],"metadata":{"id":"n5IbY3-5q_RE"}},{"cell_type":"code","source":["blob_object.tags"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P8Bl7C79q-uT","executionInfo":{"status":"ok","timestamp":1691322870935,"user_tz":-330,"elapsed":827,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"110a79b8-045e-434b-9833-35b8eb82ee9c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('X', 'NN'),\n"," ('Y', 'NNP'),\n"," ('and', 'CC'),\n"," ('Y', 'NNP'),\n"," ('are', 'VBP'),\n"," ('good', 'JJ'),\n"," ('friends.X', 'NN'),\n"," ('and', 'CC'),\n"," ('Y', 'NNP'),\n"," ('are', 'VBP'),\n"," ('getting', 'VBG'),\n"," ('married', 'VBN'),\n"," ('next', 'JJ'),\n"," ('year', 'NN')]"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["for words, tag in blob_object.tags:\n"," print (words, tag)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ao74AU3Bu12F","executionInfo":{"status":"ok","timestamp":1691323449329,"user_tz":-330,"elapsed":17,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"d2fed21c-7dcb-4673-97ea-7fdecd37e669"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X NN\n","Y NNP\n","and CC\n","Y NNP\n","are VBP\n","good JJ\n","friends.X NN\n","and CC\n","Y NNP\n","are VBP\n","getting VBG\n","married VBN\n","next JJ\n","year NN\n"]}]},{"cell_type":"markdown","source":["Here, NN represents a noun, DT represents as a determiner, etc. You can check the full list of tags from below."],"metadata":{"id":"KSrG-W9Nx2dj"}},{"cell_type":"markdown","source":["#Heres a list of the tags, what they mean, and some examples:\n","\n","CC coordinating conjunction\n","\n","CD cardinal digit\n","\n","DT determiner\n","\n","EX existential there (like: “there is” … think of it like “there exists”)\n","\n","FW foreign word\n","\n","IN preposition/subordinating conjunction\n","\n","JJ adjective ‘big’\n","\n","JJR adjective, comparative ‘bigger’\n","\n","JJS adjective, superlative ‘biggest’\n","\n","LS list marker 1)\n","\n","MD modal could, will\n","\n","NN noun, singular ‘desk’\n","\n","NNS noun plural ‘desks’\n","\n","NNP proper noun, singular ‘Harrison’\n","\n","NNPS proper noun, plural ‘Americans’\n","\n","PDT predeterminer ‘all the kids’\n","\n","POS possessive ending parent‘s\n","\n","PRP personal pronoun I, he, she\n","\n","PRP$ possessive pronoun my, his, hers\n","\n","RB adverb very, silently,\n","\n","RBR adverb, comparative better\n","\n","RBS adverb, superlative best\n","\n","RP particle give up\n","\n","TO to go ‘to‘ the store.\n","\n","UH interjection errrrrrrrm\n","\n","VB verb, base form take\n","\n","VBD verb, past tense took\n","\n","VBG verb, gerund/present participle taking\n","\n","VBN verb, past participle taken\n","\n","VBP verb, sing. present, non-3d take\n","\n","VBZ verb, 3rd person sing. present takes\n","\n","WDT wh-determiner which\n","\n","WP wh-pronoun who, what\n","\n","WP$ possessive wh-pronoun whose\n","\n","WRB wh-adverb where, when\n","\n","# from textblob lib import Tex"],"metadata":{"id":"DlYxdgL0vO1_"}},{"cell_type":"markdown","source":[],"metadata":{"id":"JZ9mLeuXt7Ek"}},{"cell_type":"code","source":["print(blob_object.sentences)\n","## printing words of first sentence\n","for words in blob_object.sentences[0].words:\n","  print (words)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y7LRyz37tyoF","executionInfo":{"status":"ok","timestamp":1691323165965,"user_tz":-330,"elapsed":15,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"0adc2fb4-c681-4765-a4f6-134bc49e7b77"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[Sentence(\"X, Y and Y are good friends.X and Y are  getting married next year.\")]\n","X\n","Y\n","and\n","Y\n","are\n","good\n","friends.X\n","and\n","Y\n","are\n","getting\n","married\n","next\n","year\n"]}]},{"cell_type":"markdown","source":["noun_phrases()\n","\n","#noun_phrases() method, we can get the noun phrases of the sentences by using TextBlob. noun_phrases() method.\n","\n","\n"," Return : Return list of noun values\n","\n","Noun Phrase Extraction\n","\n","Since we extracted the words in the previous section, instead of that we can just extract out the noun phrases from the textblob. Noun Phrase extraction is particularly important when you want to analyze the “who” in a sentence. Lets see an example below."],"metadata":{"id":"r2EgsFJS6B3Y"}},{"cell_type":"code","source":["blob_object.noun_phrases"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P36cz9U_269w","executionInfo":{"status":"ok","timestamp":1691322877587,"user_tz":-330,"elapsed":16,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"ae305cec-6234-4a8c-c4a5-6ffa0d33deda"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["WordList(['good friends.x'])"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["When a sentence is passed into Textblob it gives two outputs, which are polarity and subjectivity.\n","\n","Polarity is the output that lies between [-1,1], where -1 refers to negative sentiment and +1 refers to positive sentiment.\n","\n","\n","Subjectivity is the output that lies within [0,1] and refers to personal opinions and judgments."],"metadata":{"id":"O326IexPKbaf"}},{"cell_type":"markdown","source":["#Tokenization\n","Tokenization is the process of separating each word in the sentence into a list so that it can be easily interpreted and manipulated later.\n","\n","It takes one line of code to implement tokenization."],"metadata":{"id":"i2T9MIjVaO-m"}},{"cell_type":"code","source":["from textblob import TextBlob\n","text = '''\n","Text Blob is a simple Python library used to perform NLP tasks like tokenization, POS-Tagging, Words inflection, Noun phrase extraction, lemmatization, N-grams, and sentiment Analysis. If you know about the state-of-the-art NLTK library, TextBlob has a few more features than it, such as  Spelling correction, Creating a summary of a text, Translation, and language detection. It is an easy tool that covers all the necessary aspects of natural language processing.\n","'''\n","blob = TextBlob(text)\n","## This will give us each word in the sentence\n","blob.words\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6JLv3SNwaU5N","executionInfo":{"status":"ok","timestamp":1691334828959,"user_tz":-330,"elapsed":523,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"7d55d401-35c2-4d78-840f-265a844a7323"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["WordList(['Text', 'Blob', 'is', 'a', 'simple', 'Python', 'library', 'used', 'to', 'perform', 'NLP', 'tasks', 'like', 'tokenization', 'POS-Tagging', 'Words', 'inflection', 'Noun', 'phrase', 'extraction', 'lemmatization', 'N-grams', 'and', 'sentiment', 'Analysis', 'If', 'you', 'know', 'about', 'the', 'state-of-the-art', 'NLTK', 'library', 'TextBlob', 'has', 'a', 'few', 'more', 'features', 'than', 'it', 'such', 'as', 'Spelling', 'correction', 'Creating', 'a', 'summary', 'of', 'a', 'text', 'Translation', 'and', 'language', 'detection', 'It', 'is', 'an', 'easy', 'tool', 'that', 'covers', 'all', 'the', 'necessary', 'aspects', 'of', 'natural', 'language', 'processing'])"]},"metadata":{},"execution_count":73}]},{"cell_type":"markdown","source":["#Language Translation\n","Another powerful feature of the TextBlob library is to translate from one language to another.\n","\n","On the backend, the TextBlob language translator uses the Google Translate API. We use the translation method for this purpose.\n","\n","The language that you want your text to be translated to is passed as a parameter to the method."],"metadata":{"id":"wbKJEfGRa7fE"}},{"cell_type":"code","source":["blob = TextBlob(\"hello\")\n","blob.translate(from_lang='en', to='fr')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"spiaMANvbAVD","executionInfo":{"status":"ok","timestamp":1691335459189,"user_tz":-330,"elapsed":763,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"ddb1a35c-398a-42b4-d657-5ed9140a7c90"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TextBlob(\"Bonjour\")"]},"metadata":{},"execution_count":79}]},{"cell_type":"markdown","source":["#Lemmatization\n","\n","Lemmatization refers to reducing the word to its root form, as found in a dictionary.\n","\n"," Lemmatization considers the context and converts the word to its meaningful base form.\n","\n"," It is responsible for grouping different inflected forms of words into the root form, having the same meaning.\n","\n","  For instance, stemming the word ‘Caring‘ would return ‘Car‘ whereas lemmatizing the word ‘Caring‘ would return ‘Care‘."],"metadata":{"id":"4Ppdp-C0cwZv"}},{"cell_type":"code","source":["from textblob import Word\n","word1 = Word(\"media\")\n","print(\"media:\", word1.lemmatize())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XLllbcByc3jn","executionInfo":{"status":"ok","timestamp":1691335493541,"user_tz":-330,"elapsed":516,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"49b7d0cb-329b-46f4-d727-383f3927a1b6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["media: medium\n"]}]},{"cell_type":"code","source":["nltk.download('movie_reviews')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_ZKaxCeudfe0","executionInfo":{"status":"ok","timestamp":1691335658364,"user_tz":-330,"elapsed":1331,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"8391901f-89ff-4c98-e8aa-512df49e8ba5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package movie_reviews to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/movie_reviews.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["from textblob import TextBlob\n","from textblob.sentiments import NaiveBayesAnalyzer\n","opinion = TextBlob(\"This is a beautiful place\", analyzer=NaiveBayesAnalyzer())\n","opinion.sentiment"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xj7byGHudY8U","executionInfo":{"status":"ok","timestamp":1691335665512,"user_tz":-330,"elapsed":4580,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"7dae15aa-1fd3-4b39-f771-8b170a6748f6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sentiment(classification='pos', p_pos=0.6587824480260261, p_neg=0.34121755197397396)"]},"metadata":{},"execution_count":83}]},{"cell_type":"markdown","source":["#Subjectivity:\n","\n","Subjectivity is the output that lies within [0,1] and refers to personal opinions and judgments."],"metadata":{"id":"XR5D5sRcJvKz"}},{"cell_type":"code","source":["blob_object.sentiment"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Z86kKA25cyP","executionInfo":{"status":"ok","timestamp":1691322879326,"user_tz":-330,"elapsed":11,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"1e633b9a-06e2-46a3-b0e9-26cadfa3efc5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sentiment(polarity=0.31666666666666665, subjectivity=0.2833333333333334)"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["#Words Inflection and Lemmatization\n","\n","Inflection is a process of word formation in which characters are added to the base form of a word to express grammatical meanings.\n","\n","Word inflection in TextBlob is very simple, i.e., the words we tokenized from a textblob can be easily changed into singular or plural."],"metadata":{"id":"Q_oeenTZyj7M"}},{"cell_type":"code","source":["blob = TextBlob(\"Textblob libary  is library to perform grate operations on text. \\n It helps us to preprocessing of data ,etc.\")\n","print (blob.sentences[1].words[1])\n","print (blob.sentences[1].words[1].singularize())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xhjhCgAby4ow","executionInfo":{"status":"ok","timestamp":1691324675886,"user_tz":-330,"elapsed":559,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"3ff18efa-28fa-47c9-f771-76b8b1b3e954"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["helps\n","help\n"]}]},{"cell_type":"markdown","source":["#Words can be lemmatized using the lemmatize function."],"metadata":{"id":"Iz5-zpQv1WnE"}},{"cell_type":"code","source":[" w = Word('running')\n"," w.lemmatize(\"v\")  # v used for verb"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"vqsUjNzZysCW","executionInfo":{"status":"ok","timestamp":1691325231200,"user_tz":-330,"elapsed":1903,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"70d071af-61bb-415c-c58f-545220d86f36"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'run'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":31}]},{"cell_type":"markdown","source":["#N-grams\n","A combination of multiple words together are called N-Grams. N grams (N > 1) are generally more informative as compared to words, and can be used as features for language modelling.\n","\n","\n","N-grams can be easily accessed in TextBlob using the ngrams function,which returns a tuple of n successive words."],"metadata":{"id":"Ze5CvpSI2PHs"}},{"cell_type":"code","source":["for ngram in blob.ngrams(2):\n","  print (ngram)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nhMtGooM2D9s","executionInfo":{"status":"ok","timestamp":1691325329534,"user_tz":-330,"elapsed":570,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"f6a2a751-4baa-40bd-9002-2e3437d9a202"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Textblob', 'libary']\n","['libary', 'is']\n","['is', 'library']\n","['library', 'to']\n","['to', 'perform']\n","['perform', 'grate']\n","['grate', 'operations']\n","['operations', 'on']\n","['on', 'text']\n","['text', 'It']\n","['It', 'helps']\n","['helps', 'us']\n","['us', 'to']\n","['to', 'preprocessing']\n","['preprocessing', 'of']\n","['of', 'data']\n","['data', 'etc']\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"2TVOMCKY2eMs"}},{"cell_type":"markdown","source":[],"metadata":{"id":"6fBJ4OBk19e2"}},{"cell_type":"markdown","source":[],"metadata":{"id":"JVrCpRTT1WHk"}},{"cell_type":"code","source":["print(blob_object.sentiment.polarity)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k9macsNUmpY2","executionInfo":{"status":"ok","timestamp":1691322882033,"user_tz":-330,"elapsed":10,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"15edc71d-5b49-4997-f97f-60bc5ed6f836"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.31666666666666665\n"]}]},{"cell_type":"markdown","source":["#Sentiment Analysis\n","\n","Sentiment analysis is basically the process of determining the attitude or the emotion of the writer, i.e., whether it is positive or negative or neutral.\n","\n","\n","The sentiment function of textblob returns two properties, polarity, and subjectivity.\n","\n","Polarity is float which lies in the range of [-1,1] where 1 means positive statement and -1 means a negative statement.\n","\n","\n"," Subjective sentences generally refer to personal opinion, emotion or judgment whereas objective refers to factual information.\n","\n","\n","\n"," Subjectivity is also a float which lies in the range of [0,1].\n","\n","Let’s check the sentiment of our blob."],"metadata":{"id":"ShxoSgth2g6e"}},{"cell_type":"code","source":["print(blob)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LmSHAHJj2uXs","executionInfo":{"status":"ok","timestamp":1691325577015,"user_tz":-330,"elapsed":532,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"c11193fa-457b-4da9-8c39-aeb569f70d16"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Textblob libary  is library to perform grate operations on text. \n"," It helps us to preprocessing of data ,etc.\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"NziNyc714DhX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["blob1= TextBlob(\"Its a beautiful day.\")"],"metadata":{"id":"jYbfGfFP3K-G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["blob1.sentiment"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UjAvV2Hn24F0","executionInfo":{"status":"ok","timestamp":1691325696153,"user_tz":-330,"elapsed":10,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"a098bebb-ebce-4bff-be77-cc0a2c3c0705"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sentiment(polarity=0.85, subjectivity=1.0)"]},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","source":["We can see that polarity is 0.85, which means that the statement is positive and 1.0 subjectivity refers that mostly it is a public opinion and not a factual information."],"metadata":{"id":"DZECnNfV3mJt"}},{"cell_type":"markdown","source":["#Spelling Correction\n","\n","Spelling correction is a cool feature which TextBlob offers, we can be accessed using the correct function as shown below."],"metadata":{"id":"3lhJFF0u4Lhm"}},{"cell_type":"code","source":["blob2 = TextBlob('Its a beautifuly day ')\n","blob2.correct()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MYrD7jrH4Tp2","executionInfo":{"status":"ok","timestamp":1691325964651,"user_tz":-330,"elapsed":15,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"2a7d8a2a-28c6-4ef3-93aa-65d31d78ee4e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TextBlob(\"Its a beautiful day \")"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["blob2.words[2].spellcheck()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h1WLWZKb4fk9","executionInfo":{"status":"ok","timestamp":1691325994844,"user_tz":-330,"elapsed":653,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"1d672c77-dbc5-4ecd-f492-8fd8a67caa57"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('beautiful', 0.9333333333333333), ('beautifully', 0.06666666666666667)]"]},"metadata":{},"execution_count":44}]},{"cell_type":"markdown","source":["#Shallow parsing, also known as chunking, is a type of natural language processing (NLP) technique that aims to identify and extract meaningful phrases or chunks from a sentence.\n","\n","#Full parsing involves analyzing the entire grammatical structure of a sentence, which can be computationally intensive and time-consuming.\n","\n","#Shallow parsing, on the other hand, involves identifying and extracting only the most important phrases or constituents, making it faster and more efficient than full parsing.\n","\n","#This makes shallow parsing particularly useful for applications that require processing large volumes of text, such as web crawling, document indexing, and machine translation.\n","\n","\n","#Chunking is a natural language process that identifies constituent parts of sentences (nouns, verbs, adjectives, etc.) and links them to higher order units that have discrete grammatical meanings (noun groups or phrases, verb groups, etc.)"],"metadata":{"id":"IPrhBLSJw5bt"}},{"cell_type":"markdown","source":["#The first step is to determine the part of speech for each word:\n","\n",""],"metadata":{"id":"Fs8BBQb8w_x2"}},{"cell_type":"code","source":["input_str=\"A black television and a white stove were bought for the new apartment of John.\"\n","from textblob import TextBlob\n","result = TextBlob(input_str)\n","print(result.tags)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P_2c8iKe34ZQ","executionInfo":{"status":"ok","timestamp":1691376207834,"user_tz":-330,"elapsed":587,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"5ae3171f-b3b2-435e-bdf3-c198952fe381"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[('A', 'DT'), ('black', 'JJ'), ('television', 'NN'), ('and', 'CC'), ('a', 'DT'), ('white', 'JJ'), ('stove', 'NN'), ('were', 'VBD'), ('bought', 'VBN'), ('for', 'IN'), ('the', 'DT'), ('new', 'JJ'), ('apartment', 'NN'), ('of', 'IN'), ('John', 'NNP')]\n"]}]},{"cell_type":"markdown","source":["#The second step is chunking:"],"metadata":{"id":"lQRN-mT54YoW"}},{"cell_type":"code","source":["reg_exp = \"NP: {<DT>?<JJ>*<NN>}\"\n","rp = nltk.RegexpParser(reg_exp)\n","result = rp.parse(result.tags)\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jQ8pJQBp4P_d","executionInfo":{"status":"ok","timestamp":1691376240338,"user_tz":-330,"elapsed":481,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"b0a10315-1b2b-424f-948f-42ff84554988"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["(S\n","  (NP A/DT black/JJ television/NN)\n","  and/CC\n","  (NP a/DT white/JJ stove/NN)\n","  were/VBD\n","  bought/VBN\n","  for/IN\n","  (NP the/DT new/JJ apartment/NN)\n","  of/IN\n","  John/NNP)\n"]}]},{"cell_type":"markdown","source":["#Text classification using TextBlob"],"metadata":{"id":"tkujZ-q05Ked"}},{"cell_type":"code","source":["train_data = [\n","    ('This is an excellent movie', 'pos'),\n","    ('The move was fantastic I like it', 'pos'),\n","    ('You should watch it, it is brilliant', 'pos'),\n","    ('Exceptionally good', 'pos'),\n","    (\"Wonderfully directed and executed. I like it\", 'pos'),\n","    ('It was very boring', 'neg'),\n","    ('I did not like the movie', 'neg'),\n","    (\"The movie was horrible\", 'neg'),\n","    ('I will not recommend', 'neg'),\n","    ('The acting is pathetic', 'neg')\n","]\n","test_data = [\n","    ('Its a fantastic series', 'pos'),\n","    ('Never watched such a brillent movie', 'pos'),\n","    (\"horrible acting\", 'neg'),\n","    (\"It is a Wonderful movie\", 'pos'),\n","    ('waste of money', 'neg'),\n","    (\"pathetic picture\", 'neg')\n","]\n"],"metadata":{"id":"izLIQdfb5Qfh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from textblob.classifiers import NaiveBayesClassifier\n","classifier = NaiveBayesClassifier(train_data)\n"],"metadata":{"id":"qY-K3YhTmCsI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(classifier.classify(\"It is a Wonderful movie\"))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wHkPEXJnmIbS","executionInfo":{"status":"ok","timestamp":1691338154577,"user_tz":-330,"elapsed":534,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"2616b7d1-9c71-4fda-91b0-aa2067fb5617"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["neg\n"]}]},{"cell_type":"markdown","source":["Textblob provides in-build classifiers module to create a custom classifier.\n","\n"," So, let’s quickly import it and create a basic classifier."],"metadata":{"id":"JxmgVUda5VeP"}},{"cell_type":"code","source":["from textblob import classifiers\n","classifier = classifiers.NaiveBayesClassifier(training)"],"metadata":{"id":"KchBBUVs5aC3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print (classifier.accuracy(testing))\n","classifier.show_informative_features(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"htzGlXfn5kGG","executionInfo":{"status":"ok","timestamp":1691326265397,"user_tz":-330,"elapsed":926,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"c23dd606-9a2d-4753-dd68-baad0bf90ff2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0\n","Most Informative Features\n","            contains(is) = True              neg : pos    =      2.9 : 1.0\n","             contains(a) = False             neg : pos    =      1.8 : 1.0\n","         contains(never) = False             neg : pos    =      1.8 : 1.0\n"]}]},{"cell_type":"markdown","source":["#VADER:\n","It uses a list of lexical features (e.g. word) which are labeled as positive or negative according to their semantic orientation to calculate the text sentiment.\n","\n","\n","Vader sentiment returns the probability of a given input sentence to be positive, negative, and neutral."],"metadata":{"id":"cIHxrFR35-jN"}},{"cell_type":"code","source":["!pip install vaderSentiment"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JG7KATyO6kVs","executionInfo":{"status":"ok","timestamp":1691326513694,"user_tz":-330,"elapsed":6444,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"c6895772-799c-4827-fc28-0a37131cb9f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting vaderSentiment\n","  Downloading vaderSentiment-3.3.2-py2.py3-none-any.whl (125 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/126.0 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m \u001b[32m122.9/126.0 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m126.0/126.0 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from vaderSentiment) (2.27.1)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->vaderSentiment) (1.26.16)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->vaderSentiment) (2023.7.22)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests->vaderSentiment) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->vaderSentiment) (3.4)\n","Installing collected packages: vaderSentiment\n","Successfully installed vaderSentiment-3.3.2\n"]}]},{"cell_type":"code","source":["from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n","analyzer = SentimentIntensityAnalyzer()\n","sentence = \"The movie was awesome!\"\n","sentence1 = \"The movie was boring!\"\n","vs = analyzer.polarity_scores(sentence)\n","vs1 = analyzer.polarity_scores(sentence1)\n","print(\"{:-<65} {}\".format(sentence, str(vs)))\n","print(\"{:-<65} {}\".format(sentence1, str(vs1)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DQRgtqzL6IKz","executionInfo":{"status":"ok","timestamp":1691326621654,"user_tz":-330,"elapsed":528,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"be68d364-c4c9-4172-bd0b-b8f943037d76"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The movie was awesome!------------------------------------------- {'neg': 0.0, 'neu': 0.406, 'pos': 0.594, 'compound': 0.6588}\n","The movie was boring!-------------------------------------------- {'neg': 0.464, 'neu': 0.536, 'pos': 0.0, 'compound': -0.3802}\n"]}]},{"cell_type":"code","source":["from nltk.sentiment.vader import SentimentIntensityAnalyzer\n","from nltk.sentiment.util import *\n","from textblob import TextBlob\n","from nltk import tokenize\n","import pandas as pd\n"],"metadata":{"id":"I88bFeuM-bY8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VQxk_SbN-wG3","executionInfo":{"status":"ok","timestamp":1691327671136,"user_tz":-330,"elapsed":3787,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"5ac9c40f-274d-48a3-d3e8-b060352a46c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["df= pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/Dataset/hotel-reviews.csv\")"],"metadata":{"id":"C3VI5ugu-0Mv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"tNisKfiC_Dka","executionInfo":{"status":"ok","timestamp":1691327678916,"user_tz":-330,"elapsed":47,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"8cb534dc-baa9-4418-9ada-3a007e51ed62"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       User_ID                                        Description  \\\n","0      id10326  The room was kind of clean but had a VERY stro...   \n","1      id10327  I stayed at the Crown Plaza April -- - April -...   \n","2      id10328  I booked this hotel through Hotwire at the low...   \n","3      id10329  Stayed here with husband and sons on the way t...   \n","4      id10330  My girlfriends and I stayed here to celebrate ...   \n","...        ...                                                ...   \n","38927  id49253  We arrived late at night and walked in to a ch...   \n","38928  id49254  The only positive impression is location and p...   \n","38929  id49255  Traveling with friends for shopping and a show...   \n","38930  id49256  The experience was just ok. We paid extra for ...   \n","38931  id49257  The Westin is a wonderfully restored grande da...   \n","\n","            Browser_Used Device_Used Is_Response  \n","0                   Edge      Mobile   not happy  \n","1      Internet Explorer      Mobile   not happy  \n","2                Mozilla      Tablet   not happy  \n","3       InternetExplorer     Desktop       happy  \n","4                   Edge      Tablet   not happy  \n","...                  ...         ...         ...  \n","38927               Edge     Desktop       happy  \n","38928   InternetExplorer      Mobile   not happy  \n","38929            Firefox      Mobile   not happy  \n","38930             Chrome     Desktop   not happy  \n","38931            Mozilla     Desktop       happy  \n","\n","[38932 rows x 5 columns]"],"text/html":["\n","\n","  <div id=\"df-c3e51803-dec0-4b11-a8ad-053286262297\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User_ID</th>\n","      <th>Description</th>\n","      <th>Browser_Used</th>\n","      <th>Device_Used</th>\n","      <th>Is_Response</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>id10326</td>\n","      <td>The room was kind of clean but had a VERY stro...</td>\n","      <td>Edge</td>\n","      <td>Mobile</td>\n","      <td>not happy</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>id10327</td>\n","      <td>I stayed at the Crown Plaza April -- - April -...</td>\n","      <td>Internet Explorer</td>\n","      <td>Mobile</td>\n","      <td>not happy</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>id10328</td>\n","      <td>I booked this hotel through Hotwire at the low...</td>\n","      <td>Mozilla</td>\n","      <td>Tablet</td>\n","      <td>not happy</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>id10329</td>\n","      <td>Stayed here with husband and sons on the way t...</td>\n","      <td>InternetExplorer</td>\n","      <td>Desktop</td>\n","      <td>happy</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>id10330</td>\n","      <td>My girlfriends and I stayed here to celebrate ...</td>\n","      <td>Edge</td>\n","      <td>Tablet</td>\n","      <td>not happy</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>38927</th>\n","      <td>id49253</td>\n","      <td>We arrived late at night and walked in to a ch...</td>\n","      <td>Edge</td>\n","      <td>Desktop</td>\n","      <td>happy</td>\n","    </tr>\n","    <tr>\n","      <th>38928</th>\n","      <td>id49254</td>\n","      <td>The only positive impression is location and p...</td>\n","      <td>InternetExplorer</td>\n","      <td>Mobile</td>\n","      <td>not happy</td>\n","    </tr>\n","    <tr>\n","      <th>38929</th>\n","      <td>id49255</td>\n","      <td>Traveling with friends for shopping and a show...</td>\n","      <td>Firefox</td>\n","      <td>Mobile</td>\n","      <td>not happy</td>\n","    </tr>\n","    <tr>\n","      <th>38930</th>\n","      <td>id49256</td>\n","      <td>The experience was just ok. We paid extra for ...</td>\n","      <td>Chrome</td>\n","      <td>Desktop</td>\n","      <td>not happy</td>\n","    </tr>\n","    <tr>\n","      <th>38931</th>\n","      <td>id49257</td>\n","      <td>The Westin is a wonderfully restored grande da...</td>\n","      <td>Mozilla</td>\n","      <td>Desktop</td>\n","      <td>happy</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>38932 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3e51803-dec0-4b11-a8ad-053286262297')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-3c76a39b-543a-4804-8a68-be563c3dcb6e\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3c76a39b-543a-4804-8a68-be563c3dcb6e')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-3c76a39b-543a-4804-8a68-be563c3dcb6e button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c3e51803-dec0-4b11-a8ad-053286262297 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c3e51803-dec0-4b11-a8ad-053286262297');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":61}]},{"cell_type":"markdown","source":["#The above is the dataset preview of the hotel’s dataset."],"metadata":{"id":"JImFW4Hw_LLi"}},{"cell_type":"code","source":["df.drop_duplicates(subset =\"Description\", keep = \"first\", inplace = True)\n","df['Description'] = df['Description'].astype('str')\n","def get_polarity(text):\n","  return TextBlob(text).sentiment.polarity\n","df['Polarity'] = df['Description'].apply(get_polarity)"],"metadata":{"id":"Lkl2_qn4_Pdo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['Sentiment_Type']=''\n","df.loc[df.Polarity>0,'Sentiment_Type']='POSITIVE'\n","df.loc[df.Polarity==0,'Sentiment_Type']='NEUTRAL'\n","df.loc[df.Polarity<0,'Sentiment_Type']='NEGATIVE'"],"metadata":{"id":"Gp7i6cLX_bjS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#After the TextBlob the polarity and sentiment type for each comment/description received."],"metadata":{"id":"d154tvNb_sL3"}},{"cell_type":"code","source":["df.Sentiment_Type.value_counts().plot(kind='bar',title=\"Sentiment Analysis\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":525},"id":"zeVYrm_G_q0A","executionInfo":{"status":"ok","timestamp":1691327850097,"user_tz":-330,"elapsed":674,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"9e394c2a-5130-440d-d37c-fd58088d5d47"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: title={'center': 'Sentiment Analysis'}>"]},"metadata":{},"execution_count":65},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Plotting the bar graph for the same, the positive sentiments are more than negative which can build understanding as people are happy with service."],"metadata":{"id":"q4qY7m2p_1Kn"}},{"cell_type":"markdown","source":["#VADER :\n","VADER (Valence Aware Dictionary and sEntiment Reasoner) is a rule/lexicon-based, open-source sentiment analyzer pre-built library, protected under the MIT license."],"metadata":{"id":"-mj0viSc_9Jg"}},{"cell_type":"code","source":["import nltk\n","nltk.download('vader_lexicon')\n","from nltk.sentiment.vader import SentimentIntensityAnalyzer\n","sid = SentimentIntensityAnalyzer()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W-DbrGQVAESC","executionInfo":{"status":"ok","timestamp":1691327943152,"user_tz":-330,"elapsed":18,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"bf801a5a-e91d-40db-cf0e-38f5326a1b70"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n"]}]},{"cell_type":"markdown","source":["#With VADER, using the sid.polarity_scores(Description)), to generate sentiment polarity."],"metadata":{"id":"IRZCKE9uAIAI"}},{"cell_type":"code","source":["df['scores'] = df['Description'].apply(lambda Description: sid.polarity_scores(Description))\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"VNyIPxgKALLa","executionInfo":{"status":"ok","timestamp":1691328051063,"user_tz":-330,"elapsed":80061,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"b3541f35-831d-477e-fd00-d59ed426eec6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   User_ID                                        Description  \\\n","0  id10326  The room was kind of clean but had a VERY stro...   \n","1  id10327  I stayed at the Crown Plaza April -- - April -...   \n","2  id10328  I booked this hotel through Hotwire at the low...   \n","3  id10329  Stayed here with husband and sons on the way t...   \n","4  id10330  My girlfriends and I stayed here to celebrate ...   \n","\n","        Browser_Used Device_Used Is_Response  Polarity Sentiment_Type  \\\n","0               Edge      Mobile   not happy  0.346190       POSITIVE   \n","1  Internet Explorer      Mobile   not happy  0.042363       POSITIVE   \n","2            Mozilla      Tablet   not happy  0.124969       POSITIVE   \n","3   InternetExplorer     Desktop       happy  0.718500       POSITIVE   \n","4               Edge      Tablet   not happy  0.117192       POSITIVE   \n","\n","                                              scores  \n","0  {'neg': 0.0, 'neu': 0.675, 'pos': 0.325, 'comp...  \n","1  {'neg': 0.053, 'neu': 0.897, 'pos': 0.05, 'com...  \n","2  {'neg': 0.048, 'neu': 0.866, 'pos': 0.085, 'co...  \n","3  {'neg': 0.0, 'neu': 0.653, 'pos': 0.347, 'comp...  \n","4  {'neg': 0.041, 'neu': 0.871, 'pos': 0.088, 'co...  "],"text/html":["\n","\n","  <div id=\"df-c7e8f6e7-151c-4fc4-83bf-600a5d8b477d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User_ID</th>\n","      <th>Description</th>\n","      <th>Browser_Used</th>\n","      <th>Device_Used</th>\n","      <th>Is_Response</th>\n","      <th>Polarity</th>\n","      <th>Sentiment_Type</th>\n","      <th>scores</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>id10326</td>\n","      <td>The room was kind of clean but had a VERY stro...</td>\n","      <td>Edge</td>\n","      <td>Mobile</td>\n","      <td>not happy</td>\n","      <td>0.346190</td>\n","      <td>POSITIVE</td>\n","      <td>{'neg': 0.0, 'neu': 0.675, 'pos': 0.325, 'comp...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>id10327</td>\n","      <td>I stayed at the Crown Plaza April -- - April -...</td>\n","      <td>Internet Explorer</td>\n","      <td>Mobile</td>\n","      <td>not happy</td>\n","      <td>0.042363</td>\n","      <td>POSITIVE</td>\n","      <td>{'neg': 0.053, 'neu': 0.897, 'pos': 0.05, 'com...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>id10328</td>\n","      <td>I booked this hotel through Hotwire at the low...</td>\n","      <td>Mozilla</td>\n","      <td>Tablet</td>\n","      <td>not happy</td>\n","      <td>0.124969</td>\n","      <td>POSITIVE</td>\n","      <td>{'neg': 0.048, 'neu': 0.866, 'pos': 0.085, 'co...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>id10329</td>\n","      <td>Stayed here with husband and sons on the way t...</td>\n","      <td>InternetExplorer</td>\n","      <td>Desktop</td>\n","      <td>happy</td>\n","      <td>0.718500</td>\n","      <td>POSITIVE</td>\n","      <td>{'neg': 0.0, 'neu': 0.653, 'pos': 0.347, 'comp...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>id10330</td>\n","      <td>My girlfriends and I stayed here to celebrate ...</td>\n","      <td>Edge</td>\n","      <td>Tablet</td>\n","      <td>not happy</td>\n","      <td>0.117192</td>\n","      <td>POSITIVE</td>\n","      <td>{'neg': 0.041, 'neu': 0.871, 'pos': 0.088, 'co...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c7e8f6e7-151c-4fc4-83bf-600a5d8b477d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-87c44ac1-1904-4a17-83d5-50c1818b6801\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-87c44ac1-1904-4a17-83d5-50c1818b6801')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-87c44ac1-1904-4a17-83d5-50c1818b6801 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c7e8f6e7-151c-4fc4-83bf-600a5d8b477d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c7e8f6e7-151c-4fc4-83bf-600a5d8b477d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":67}]},{"cell_type":"markdown","source":["#After the VADER the scores that have pos,neg,neu and compound."],"metadata":{"id":"C1ac1YUaARIn"}},{"cell_type":"code","source":["df['compound'] = df['scores'].apply(lambda score_dict: score_dict['compound'])\n","df['sentiment_type']=''\n","df.loc[df.compound>0,'sentiment_type']='POSITIVE'\n","df.loc[df.compound==0,'sentiment_type']='NEUTRAL'\n","df.loc[df.compound<0,'sentiment_type']='NEGATIVE'"],"metadata":{"id":"cL23cdeqATvY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#After the VADER the compound and sentiment type for each comment/description received."],"metadata":{"id":"SAU-32y3AXUA"}},{"cell_type":"code","source":["df.sentiment_type.value_counts().plot(kind='bar',title=\"sentiment analysis\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":525},"id":"ikBunxYeAbYh","executionInfo":{"status":"ok","timestamp":1691328075810,"user_tz":-330,"elapsed":905,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"5c03f524-3f83-4de2-c2e9-413c388c6aa1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: title={'center': 'sentiment analysis'}>"]},"metadata":{},"execution_count":69},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Plotting the bar graph for the same, the positive sentiments are more than negative which can build understanding as people are happy with service."],"metadata":{"id":"q6gyltZJAp9e"}},{"cell_type":"code","source":[" from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n","\n","\n","sentences = [\"VADER is smart, handsome, and funny.\",  # positive sentence example\n","             \"VADER is smart, handsome, and funny!\",  # punctuation emphasis handled correctly (sentiment intensity adjusted)\n","             \"VADER is very smart, handsome, and funny.\", # booster words handled correctly (sentiment intensity adjusted)\n","             \"VADER is VERY SMART, handsome, and FUNNY.\",  # emphasis for ALLCAPS handled\n","             \"VADER is VERY SMART, handsome, and FUNNY!!!\", # combination of signals - VADER appropriately adjusts intensity\n","             \"VADER is VERY SMART, uber handsome, and FRIGGIN FUNNY!!!\", # booster words & punctuation make this close to ceiling for score\n","             \"VADER is not smart, handsome, nor funny.\",  # negation sentence example\n","             \"The book was good.\",  # positive sentence\n","             \"At least it isn't a horrible book.\",  # negated negative sentence with contraction\n","             \"The book was only kind of good.\", # qualified positive sentence is handled correctly (intensity adjusted)\n","             \"The plot was good, but the characters are uncompelling and the dialog is not great.\", # mixed negation sentence\n","             \"Today SUX!\",  # negative slang with capitalization emphasis\n","             \"Today only kinda sux! But I'll get by, lol\", # mixed sentiment example with slang and constrastive conjunction \"but\"\n","             \"Make sure you :) or :D today!\",  # emoticons handled\n","\n","             \"Not bad at all\"  # Capitalized negation\n","             ]\n","\n","analyzer = SentimentIntensityAnalyzer()\n","for sentence in sentences:\n","    vs = analyzer.polarity_scores(sentence)\n","    print(\"{:-<65} {}\".format(sentence, str(vs)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q3s4Ne09T5dz","executionInfo":{"status":"ok","timestamp":1691333192678,"user_tz":-330,"elapsed":550,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"4533492c-c434-4435-a088-db5ef831d28c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["VADER is smart, handsome, and funny.----------------------------- {'neg': 0.0, 'neu': 0.254, 'pos': 0.746, 'compound': 0.8316}\n","VADER is smart, handsome, and funny!----------------------------- {'neg': 0.0, 'neu': 0.248, 'pos': 0.752, 'compound': 0.8439}\n","VADER is very smart, handsome, and funny.------------------------ {'neg': 0.0, 'neu': 0.299, 'pos': 0.701, 'compound': 0.8545}\n","VADER is VERY SMART, handsome, and FUNNY.------------------------ {'neg': 0.0, 'neu': 0.246, 'pos': 0.754, 'compound': 0.9227}\n","VADER is VERY SMART, handsome, and FUNNY!!!---------------------- {'neg': 0.0, 'neu': 0.233, 'pos': 0.767, 'compound': 0.9342}\n","VADER is VERY SMART, uber handsome, and FRIGGIN FUNNY!!!--------- {'neg': 0.0, 'neu': 0.294, 'pos': 0.706, 'compound': 0.9469}\n","VADER is not smart, handsome, nor funny.------------------------- {'neg': 0.646, 'neu': 0.354, 'pos': 0.0, 'compound': -0.7424}\n","The book was good.----------------------------------------------- {'neg': 0.0, 'neu': 0.508, 'pos': 0.492, 'compound': 0.4404}\n","At least it isn't a horrible book.------------------------------- {'neg': 0.0, 'neu': 0.678, 'pos': 0.322, 'compound': 0.431}\n","The book was only kind of good.---------------------------------- {'neg': 0.0, 'neu': 0.697, 'pos': 0.303, 'compound': 0.3832}\n","The plot was good, but the characters are uncompelling and the dialog is not great. {'neg': 0.327, 'neu': 0.579, 'pos': 0.094, 'compound': -0.7042}\n","Today SUX!------------------------------------------------------- {'neg': 0.779, 'neu': 0.221, 'pos': 0.0, 'compound': -0.5461}\n","Today only kinda sux! But I'll get by, lol----------------------- {'neg': 0.127, 'neu': 0.556, 'pos': 0.317, 'compound': 0.5249}\n","Make sure you :) or :D today!------------------------------------ {'neg': 0.0, 'neu': 0.294, 'pos': 0.706, 'compound': 0.8633}\n","Not bad at all--------------------------------------------------- {'neg': 0.0, 'neu': 0.513, 'pos': 0.487, 'compound': 0.431}\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"ejQBsB1RpA4G"}},{"cell_type":"markdown","source":["#Steps for installation\n","\n","\n","Step 1 : install the NRC module by using the pip install command in the terminal."],"metadata":{"id":"hIGXVGJ3pFiI"}},{"cell_type":"code","source":["!pip install NRCLex"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OFeX4rbXpCQX","executionInfo":{"status":"ok","timestamp":1691338691409,"user_tz":-330,"elapsed":6568,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"0c16867c-954f-4e4d-fd4a-a6dd05fbc832"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting NRCLex\n","  Downloading NRCLex-4.0-py3-none-any.whl (4.4 kB)\n","Requirement already satisfied: textblob in /usr/local/lib/python3.10/dist-packages (from NRCLex) (0.17.1)\n","INFO: pip is looking at multiple versions of nrclex to determine which version is compatible with other requirements. This could take a while.\n","  Downloading NRCLex-3.0.0.tar.gz (396 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m396.4/396.4 kB\u001b[0m \u001b[31m7.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: nltk>=3.1 in /usr/local/lib/python3.10/dist-packages (from textblob->NRCLex) (3.8.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob->NRCLex) (8.1.6)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob->NRCLex) (1.3.1)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob->NRCLex) (2022.10.31)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob->NRCLex) (4.65.0)\n","Building wheels for collected packages: NRCLex\n","  Building wheel for NRCLex (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for NRCLex: filename=NRCLex-3.0.0-py3-none-any.whl size=43307 sha256=023028c1977086d60597f18ce092a0f3c9623e40dc8c7b6cdad8607bd62e7a6a\n","  Stored in directory: /root/.cache/pip/wheels/d2/10/44/6abfb1234298806a145fd6bcaec8cbc712e88dd1cd6cb242fa\n","Successfully built NRCLex\n","Installing collected packages: NRCLex\n","Successfully installed NRCLex-3.0.0\n"]}]},{"cell_type":"code","source":["pip install -U textblob"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R4in8jTWpu7W","executionInfo":{"status":"ok","timestamp":1691339063021,"user_tz":-330,"elapsed":5485,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"f5f3e801-9fd4-46ad-9dfb-4f419ab915dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: textblob in /usr/local/lib/python3.10/dist-packages (0.17.1)\n","Requirement already satisfied: nltk>=3.1 in /usr/local/lib/python3.10/dist-packages (from textblob) (3.8.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (8.1.6)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (1.3.1)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (2022.10.31)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (4.65.0)\n"]}]},{"cell_type":"code","source":[" pip install -U textblob.download_corpora"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hCmYv_IBqiR_","executionInfo":{"status":"ok","timestamp":1691339110339,"user_tz":-330,"elapsed":1392,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"e9df95b1-af44-4c05-83f1-7798716da8c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[31mERROR: Could not find a version that satisfies the requirement textblob.download_corpora (from versions: none)\u001b[0m\u001b[31m\n","\u001b[0m\u001b[31mERROR: No matching distribution found for textblob.download_corpora\u001b[0m\u001b[31m\n","\u001b[0m"]}]},{"cell_type":"code","source":["# Import module\n","import nrclex\n","from nrclex import NRCLex\n","\n","text = ['happy', 'beautiful', 'exciting', 'depressed']\n","\n","# Iterate through list\n","for i in range(len(text)):\n","\n","   # call by object creation\n","   emotion = NRCLex(text[i])\n","\n","   # Classify emotion\n","   print('\\n', text[i], ': ', emotion.top_emotions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GxKRMtdnpQio","executionInfo":{"status":"ok","timestamp":1691338741323,"user_tz":-330,"elapsed":603,"user":{"displayName":"machinelearning tutorial","userId":"18347177860367529841"}},"outputId":"a7e96ad7-3cb0-4c0e-878f-f60f50bc5426"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," happy :  [('trust', 0.25), ('positive', 0.25), ('joy', 0.25), ('anticipation', 0.25)]\n","\n"," beautiful :  [('positive', 0.5), ('joy', 0.5)]\n","\n"," exciting :  [('surprise', 0.25), ('positive', 0.25), ('joy', 0.25), ('anticipation', 0.25)]\n","\n"," depressed :  [('fear', 0.25), ('anger', 0.25), ('negative', 0.25), ('sadness', 0.25)]\n"]}]}]}